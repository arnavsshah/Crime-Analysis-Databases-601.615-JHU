<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/css/bootstrap.min.css">

    <!-- Load d3.js -->
    <script src="https://d3js.org/d3.v4.js"></script>
    <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>

  </head>
  <body>

    <nav class="navbar navbar-default navbar-static-top">
      <div class="container">
        <div class="navbar-header">
          <a class="navbar-brand" href="/">Crime Analysis</a>
    
          <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <sapn class="icon-bar"></sapn>
          </button>
        </div>
        <ul class="nav navbar-nav navbar-right collapse navbar-collapse">
          <li><a href="/">Home</a></li>
          <li class="active"><a href="/crime">Crime</a></li>
        </ul>
      </div>
    </nav>

    <form action="/crime" method="post">
      
      <h1>Crime</h1>
      
      <fieldset>
        
        <legend><span class="number">1</span> Time</legend>
        
        <div class="form-group form-check">
          <input class="form-check-input" type="radio" name="radio" id="year" value="year">
          <label class="form-check-label" for="year">Year</label>
          <input class="form-check-input" type="radio" name="radio" id="month" value="month">
          <label class="form-check-label" for="month">Month</label>
          <input class="form-check-input" type="radio" name="radio" id="day" value="day">
          <label class="form-check-label" for="day">Day</label>
          <input class="form-check-input" type="radio" name="radio" id="time" value="time">
          <label class="form-check-label" for="time">Time</label>
        </div>

        <div class="form-group form-check">
          <select name="year" class="custom-select">
            <option value="" selected>Year</option>
            <% var years = ["2018", "2019", "2020", "2021", "2022"]; %>
            <% for(var i=0; i < years.length; i++) { %>
            <option value="<%= years[i]%>"><%= years[i]%></option>
            <% } %>
          </select>
  
          <select name="month" class="custom-select">
            <option value="" selected>Month</option>
            <% var months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]; %>
            <% for(var i=0; i < months.length; i++) { %>
            <option value="<%= i + 1%>"><%= months[i]%></option>
            <% } %>
          </select>
  
          <select name="day" class="custom-select">
            <option value="" selected>Day</option>
            <% var days = [ "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]; %>
            <% for(var i=0; i < days.length; i++) { %>
            <option value="<%= days[i]%>"><%= days[i]%></option>
            <% } %>
          </select>
        </div>
      
      </fieldset>
      
      <fieldset>
        
        <legend><span class="number">2</span> Location</legend>
        
        <div class="form-group form-check">
          <input class="form-check-input" type="radio" name="radio" id="neighborhood" value="neighborhood">
          <label class="form-check-label" for="neighborhood">Neighborhood</label>
        </div>
        <div class="form-group form-check">
          <select name="neighborhood" class="custom-select">
            <option value="" selected>Neighborhood</option>
            <% for(var i=0; i < neighborhood.length; i++) { %>
            <option value="<%= neighborhood[i]%>"><%= neighborhood[i]%></option>
            <% } %>
          </select>
        </div>
        
      </fieldset>

      <fieldset>
        
        <legend><span class="number">3</span> Categories</legend>
        
        <div class="form-group form-check">
          <input class="form-check-input" type="radio" name="radio" id="category" value="category">
          <label class="form-check-label" for="category">Incident Category</label>
          <input class="form-check-input" type="radio" name="radio" id="sub_category" value="sub_category">
          <label class="form-check-label" for="sub_category">Incident Sub-Category</label>
        </div>
        <div class="form-group form-check">
          <select name="category" class="custom-select">
            <option value="" selected>Incident Category</option>  
            <% for(var i=0; i < category.length; i++) { %>
            <option value="<%= category[i]%>"><%= category[i]%></option>
            <% } %>
          </select>
          <select name="sub_category" class="custom-select">
            <option value="" selected>Incident Sub-Category</option>
            <% for(var i=0; i < sub_category.length; i++) { %>
            <option value="<%= sub_category[i]%>"><%= sub_category[i]%></option>
            <% } %>
          </select>
        </div>
        
      </fieldset>

      <fieldset>
        
        <legend><span class="number">4</span> Neighborhoods for COVID</legend>
        
        <div class="form-group form-check">
          <input class="form-check-input" type="radio" name="radio" id="covid_neighborhood" value="covid_neighborhood">
          <label class="form-check-label" for="covid_neighborhood">Neighborhood</label>
        </div>
      </fieldset>

      <fieldset>
        
        <legend><span class="number">5</span> Neighborhoods for Fire Incidents</legend>
        
        <div class="form-group form-check">
          <input class="form-check-input" type="radio" name="radio" id="fire_neighborhood" value="fire_neighborhood">
          <label class="form-check-label" for="fire_neighborhood">Neighborhood</label>
        </div>
      </fieldset>
      
      <fieldset>
        
        <legend><span class="number">6</span> Neighborhoods for Affordable Housing</legend>
        
        <div class="form-group form-check">
          <input class="form-check-input" type="radio" name="radio" id="housing_neighborhood" value="housing_neighborhood">
          <label class="form-check-label" for="housing_neighborhood">Neighborhood</label>
        </div>
      </fieldset>

      <button type="submit">Submit</button>
    </form>

    <hr>
    <!-- Create a div where the graph will take place -->
    <div id="my_dataviz"></div>


  </body>


  <script>

    var plot_graph =  '<%- plot_graph %>'
    var is_double_bar =  '<%- is_double_bar %>'

    if (plot_graph == 'true') {

      if (is_double_bar == 'true') {
        var num_grps = '<%- num_grps %>'
        // set the dimensions and margins of the graph
        var margin = {top: 10, right: 30, bottom: 90, left: 40},
            width = 30 * num_grps - margin.left - margin.right,
            height = 450 - margin.top - margin.bottom;

        // append the svg object to the body of the page
        var svg = d3.select("#my_dataviz")
          .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform",
                  "translate(" + margin.left + "," + margin.top + ")");

        // Parse the Data
        var data = '<%- data %>'
        data = JSON.parse(data)
        var y_lim = '<%- y_lim %>'

        // List of subgroups = header of the csv files = soil condition here
        var subgroups = ['cnt', 'cnt2']

        // List of groups = species here = value of the first column called group -> I show them on the X axis
        var groups = d3.map(data, function(d){return(d['grp'])}).keys()

        // Add X axis
        var x = d3.scaleBand()
            .domain(groups)
            .range([0, width])
            .padding([0.2])
        svg.append("g")
          .attr("transform", "translate(0," + height + ")")
          .call(d3.axisBottom(x))
          .selectAll("text")
            .attr("transform", "translate(-10,0)rotate(-45)")
            .style("text-anchor", "end");
          

        // Add Y axis
        var y = d3.scaleLinear()
          .domain([0, y_lim])
          .range([ height, 0 ]);
        svg.append("g")
          .call(d3.axisLeft(y));

        // color palette = one color per subgroup
        var color = d3.scaleOrdinal()
          .domain(subgroups)
          .range(d3.schemeSet2);

        //stack the data? --> stack per subgroup
        var stackedData = d3.stack()
          .keys(subgroups)
          (data)


        // ----------------
        // Highlight a specific subgroup when hovered
        // ----------------

        // What happens when user hover a bar
        var mouseover = function(d) {
          // what subgroup are we hovering?
          var subgroupName = d3.select(this.parentNode).datum().key; // This was the tricky part
          var subgroupValue = d[subgroupName];
          // Reduce opacity of all rect to 0.2
          d3.selectAll(".myRect").style("opacity", 0.2)
          // Highlight all rects of this subgroup with opacity 0.8. It is possible to select them since they have a specific class = their name.
          d3.selectAll("."+subgroupName)
            .style("opacity", 1)
          }

        // When user do not hover anymore
        var mouseleave = function(d) {
          // Back to normal opacity: 0.8
          d3.selectAll(".myRect")
            .style("opacity",0.8)
          }

        // Show the bars
        svg.append("g")
          .selectAll("g")
          // Enter in the stack data = loop key per key = group per group
          .data(stackedData)
          .enter().append("g")
            .attr("fill", function(d) { return color(d.key); })
            .attr("class", function(d){ return "myRect " + d.key }) // Add a class to each subgroup: their name
            .selectAll("rect")
            // enter a second time = loop subgroup per subgroup to add all rectangles
            .data(function(d) { return d; })
            .enter().append("rect")
              .attr("x", function(d) { return x(d.data['grp']); })
              .attr("y", function(d) { return y(d[1]); })
              .attr("height", function(d) { return y(d[0]) - y(d[1]); })
              .attr("width",x.bandwidth())
              .attr("stroke", "grey")
            .on("mouseover", mouseover)
            .on("mouseleave", mouseleave)
      }
      else{
        
        var num_grps = '<%- num_grps %>'
        // set the dimensions and margins of the graph
        var margin = {top: 10, right: 30, bottom: 90, left: 40},
            width = 30 * num_grps - margin.left - margin.right,
            height = 450 - margin.top - margin.bottom;
        
        // append the svg object to the body of the page
        var svg = d3.select("#my_dataviz")
          .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
          .append("g")
            .attr("transform",
                  "translate(" + margin.left + "," + margin.top + ")");
        
        // Parse the Data
        var data = '<%- data %>'
        data = JSON.parse(data)
        var y_lim = '<%- y_lim %>'
        
        // X axis
        var x = d3.scaleBand()
          .range([ 0, width ])
          .domain(data.map(function(d) { return d['grp']; }))
          .padding(0.2);
        svg.append("g")
          .attr("transform", "translate(0," + height + ")")
          .call(d3.axisBottom(x))
          .selectAll("text")
            .attr("transform", "translate(-10,0)rotate(-45)")
            .style("text-anchor", "end");
        
        // Add Y axis
        var y = d3.scaleLinear()
          .domain([0, y_lim])
          .range([ height, 0]);
        svg.append("g")
          .call(d3.axisLeft(y));
        
        // Bars
        svg.selectAll("mybar")
          .data(data)
          .enter()
          .append("rect")
            .attr("x", function(d) { return x(d['grp']); })
            .attr("width", x.bandwidth())
            .attr("fill", "#69b3a2")
            // no bar at the beginning thus:
            .attr("height", function(d) { return height - y(0); }) // always equal to 0
            .attr("y", function(d) { return y(0); })
        
        // Animation
        svg.selectAll("rect")
          .transition()
          .duration(800)
          .attr("y", function(d) { return y(parseInt(d['cnt'])); })
          .attr("height", function(d) { return height - y(parseInt(d['cnt'])); })
          .delay(function(d,i){console.log(i) ; return(i*100)})

      }
    }
  
    
    </script>


</html>

